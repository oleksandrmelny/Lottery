{"id":"55586b36e30faf69b1a70797fe3e5465","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"contracts/Raffle.sol":{"content":"// Raffle\n\n//Enter the lottery\n// PICK WInner\n// Winner picked X minutes\n\n// Chailink oracle\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\nimport \"node_modules/@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\nerror Raffle_NotEnoughtETH();\n\ncontract Raffle is VRFConsumerBaseV2{\n    uint256 private immutable i_entrancefee;\n    address payable[] private s_players;\n    event RaffleEnster(address indexed player);\n    constructor(address vrfCoordinatorV2 ,uint256 entrancefee) VRFConsumerBaseV2(vrfCoordinatorV2){\n        i_entrancefee = entrancefee;\n    }\n\n    function enterRaffle() public payable{\n        if(msg.value < i_entrancefee){\n            revert Raffle_NotEnoughtETH();\n        }\n        s_players.push(payable(msg.sender));\n        //events\n        emit RaffleEnster(msg.sender);\n    }\n    function reqpickRandomNumb()external{\n\n    }\n    function fulfillRandomWords(uint256 reqID, uint256[] memory randomWords) internal override{\n\n    }\n    function getFee() public view returns(uint256){\n        return i_entrancefee;\n    }\n    function getPlayer(uint256 index) public view returns(address){\n        return s_players[index];\n    }\n}"},"node_modules/@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"contracts/Raffle.sol":{"ast":{"absolutePath":"contracts/Raffle.sol","exportedSymbols":{"Raffle":[93],"Raffle_NotEnoughtETH":[4],"VRFConsumerBaseV2":[151]},"id":94,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"126:23:0"},{"absolutePath":"node_modules/@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","file":"node_modules/@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":94,"sourceUnit":152,"src":"150:78:0","symbolAliases":[],"unitAlias":""},{"errorSelector":"b2844442","id":4,"name":"Raffle_NotEnoughtETH","nameLocation":"235:20:0","nodeType":"ErrorDefinition","parameters":{"id":3,"nodeType":"ParameterList","parameters":[],"src":"255:2:0"},"src":"229:29:0"},{"abstract":false,"baseContracts":[{"baseName":{"id":5,"name":"VRFConsumerBaseV2","nameLocations":["279:17:0"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"279:17:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"279:17:0"}],"canonicalName":"Raffle","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":93,"linearizedBaseContracts":[93,151],"name":"Raffle","nameLocation":"269:6:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":8,"mutability":"immutable","name":"i_entrancefee","nameLocation":"328:13:0","nodeType":"VariableDeclaration","scope":93,"src":"302:39:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7,"name":"uint256","nodeType":"ElementaryTypeName","src":"302:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":11,"mutability":"mutable","name":"s_players","nameLocation":"373:9:0","nodeType":"VariableDeclaration","scope":93,"src":"347:35:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[]"},"typeName":{"baseType":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"347:15:0","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":10,"nodeType":"ArrayTypeName","src":"347:17:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"private"},{"anonymous":false,"eventSelector":"c0b8dcec7f7b324cf979cccfb4ea084e2188e0e073a215f2e389433c68442c81","id":15,"name":"RaffleEnster","nameLocation":"394:12:0","nodeType":"EventDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"423:6:0","nodeType":"VariableDeclaration","scope":15,"src":"407:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"407:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"406:24:0"},"src":"388:43:0"},{"body":{"id":29,"nodeType":"Block","src":"530:44:0","statements":[{"expression":{"id":27,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":25,"name":"i_entrancefee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"540:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":26,"name":"entrancefee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"556:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"540:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":28,"nodeType":"ExpressionStatement","src":"540:27:0"}]},"id":30,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":22,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"513:16:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":23,"kind":"baseConstructorSpecifier","modifierName":{"id":21,"name":"VRFConsumerBaseV2","nameLocations":["495:17:0"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"495:17:0"},"nodeType":"ModifierInvocation","src":"495:35:0"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":17,"mutability":"mutable","name":"vrfCoordinatorV2","nameLocation":"456:16:0","nodeType":"VariableDeclaration","scope":30,"src":"448:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":16,"name":"address","nodeType":"ElementaryTypeName","src":"448:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":19,"mutability":"mutable","name":"entrancefee","nameLocation":"482:11:0","nodeType":"VariableDeclaration","scope":30,"src":"474:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":18,"name":"uint256","nodeType":"ElementaryTypeName","src":"474:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"447:47:0"},"returnParameters":{"id":24,"nodeType":"ParameterList","parameters":[],"src":"530:0:0"},"scope":93,"src":"436:138:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":57,"nodeType":"Block","src":"617:200:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":36,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":33,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"630:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"634:5:0","memberName":"value","nodeType":"MemberAccess","src":"630:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":35,"name":"i_entrancefee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"642:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"630:25:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":41,"nodeType":"IfStatement","src":"627:83:0","trueBody":{"id":40,"nodeType":"Block","src":"656:54:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":37,"name":"Raffle_NotEnoughtETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4,"src":"677:20:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":38,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"677:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":39,"nodeType":"RevertStatement","src":"670:29:0"}]}},{"expression":{"arguments":[{"arguments":[{"expression":{"id":47,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"742:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"746:6:0","memberName":"sender","nodeType":"MemberAccess","src":"742:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":46,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"734:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":45,"name":"address","nodeType":"ElementaryTypeName","src":"734:8:0","stateMutability":"payable","typeDescriptions":{}}},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"734:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":42,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"719:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"729:4:0","memberName":"push","nodeType":"MemberAccess","src":"719:14:0","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$attached_to$_t_array$_t_address_payable_$dyn_storage_ptr_$","typeString":"function (address payable[] storage pointer,address payable)"}},"id":50,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"719:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":51,"nodeType":"ExpressionStatement","src":"719:35:0"},{"eventCall":{"arguments":[{"expression":{"id":53,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"799:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"803:6:0","memberName":"sender","nodeType":"MemberAccess","src":"799:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":52,"name":"RaffleEnster","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"786:12:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":55,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"786:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":56,"nodeType":"EmitStatement","src":"781:29:0"}]},"functionSelector":"2cfcc539","id":58,"implemented":true,"kind":"function","modifiers":[],"name":"enterRaffle","nameLocation":"589:11:0","nodeType":"FunctionDefinition","parameters":{"id":31,"nodeType":"ParameterList","parameters":[],"src":"600:2:0"},"returnParameters":{"id":32,"nodeType":"ParameterList","parameters":[],"src":"617:0:0"},"scope":93,"src":"580:237:0","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":61,"nodeType":"Block","src":"858:8:0","statements":[]},"functionSelector":"4b98f57c","id":62,"implemented":true,"kind":"function","modifiers":[],"name":"reqpickRandomNumb","nameLocation":"831:17:0","nodeType":"FunctionDefinition","parameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"848:2:0"},"returnParameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"858:0:0"},"scope":93,"src":"822:44:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[124],"body":{"id":71,"nodeType":"Block","src":"961:8:0","statements":[]},"id":72,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"880:18:0","nodeType":"FunctionDefinition","overrides":{"id":69,"nodeType":"OverrideSpecifier","overrides":[],"src":"953:8:0"},"parameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":64,"mutability":"mutable","name":"reqID","nameLocation":"907:5:0","nodeType":"VariableDeclaration","scope":72,"src":"899:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63,"name":"uint256","nodeType":"ElementaryTypeName","src":"899:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"randomWords","nameLocation":"931:11:0","nodeType":"VariableDeclaration","scope":72,"src":"914:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":65,"name":"uint256","nodeType":"ElementaryTypeName","src":"914:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":66,"nodeType":"ArrayTypeName","src":"914:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"898:45:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"961:0:0"},"scope":93,"src":"871:98:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":79,"nodeType":"Block","src":"1020:37:0","statements":[{"expression":{"id":77,"name":"i_entrancefee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"1037:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":76,"id":78,"nodeType":"Return","src":"1030:20:0"}]},"functionSelector":"ced72f87","id":80,"implemented":true,"kind":"function","modifiers":[],"name":"getFee","nameLocation":"983:6:0","nodeType":"FunctionDefinition","parameters":{"id":73,"nodeType":"ParameterList","parameters":[],"src":"989:2:0"},"returnParameters":{"id":76,"nodeType":"ParameterList","parameters":[{"constant":false,"id":75,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":80,"src":"1012:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":74,"name":"uint256","nodeType":"ElementaryTypeName","src":"1012:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1011:9:0"},"scope":93,"src":"974:83:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":91,"nodeType":"Block","src":"1124:40:0","statements":[{"expression":{"baseExpression":{"id":87,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"1141:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":89,"indexExpression":{"id":88,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"1151:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1141:16:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":86,"id":90,"nodeType":"Return","src":"1134:23:0"}]},"functionSelector":"e55ae4e8","id":92,"implemented":true,"kind":"function","modifiers":[],"name":"getPlayer","nameLocation":"1071:9:0","nodeType":"FunctionDefinition","parameters":{"id":83,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"index","nameLocation":"1089:5:0","nodeType":"VariableDeclaration","scope":92,"src":"1081:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":81,"name":"uint256","nodeType":"ElementaryTypeName","src":"1081:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1080:15:0"},"returnParameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":92,"src":"1116:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"1116:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1115:9:0"},"scope":93,"src":"1062:102:0","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":94,"src":"260:906:0","usedErrors":[4,102]}],"src":"126:1040:0"},"id":0},"node_modules/@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"node_modules/@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[151]},"id":152,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":95,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:1"},{"abstract":true,"baseContracts":[],"canonicalName":"VRFConsumerBaseV2","contractDependencies":[],"contractKind":"contract","documentation":{"id":96,"nodeType":"StructuredDocumentation","src":"57:5275:1","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":151,"linearizedBaseContracts":[151],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:1","nodeType":"ContractDefinition","nodes":[{"errorSelector":"1cf993f4","id":102,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:1","nodeType":"ErrorDefinition","parameters":{"id":101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":98,"mutability":"mutable","name":"have","nameLocation":"5413:4:1","nodeType":"VariableDeclaration","scope":102,"src":"5405:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":100,"mutability":"mutable","name":"want","nameLocation":"5427:4:1","nodeType":"VariableDeclaration","scope":102,"src":"5419:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":99,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:1"},"src":"5373:60:1"},{"constant":false,"id":104,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5462:14:1","nodeType":"VariableDeclaration","scope":151,"src":"5436:40:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":103,"name":"address","nodeType":"ElementaryTypeName","src":"5436:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":114,"nodeType":"Block","src":"5593:43:1","statements":[{"expression":{"id":112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":110,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":104,"src":"5599:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":111,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":107,"src":"5616:15:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5599:32:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":113,"nodeType":"ExpressionStatement","src":"5599:32:1"}]},"documentation":{"id":105,"nodeType":"StructuredDocumentation","src":"5481:72:1","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":115,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":107,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5576:15:1","nodeType":"VariableDeclaration","scope":115,"src":"5568:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":106,"name":"address","nodeType":"ElementaryTypeName","src":"5568:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5567:25:1"},"returnParameters":{"id":109,"nodeType":"ParameterList","parameters":[],"src":"5593:0:1"},"scope":151,"src":"5556:80:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"5640:686:1","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":124,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6338:18:1","nodeType":"FunctionDefinition","parameters":{"id":122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"requestId","nameLocation":"6365:9:1","nodeType":"VariableDeclaration","scope":124,"src":"6357:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":117,"name":"uint256","nodeType":"ElementaryTypeName","src":"6357:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":121,"mutability":"mutable","name":"randomWords","nameLocation":"6393:11:1","nodeType":"VariableDeclaration","scope":124,"src":"6376:28:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":119,"name":"uint256","nodeType":"ElementaryTypeName","src":"6376:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":120,"nodeType":"ArrayTypeName","src":"6376:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6356:49:1"},"returnParameters":{"id":123,"nodeType":"ParameterList","parameters":[],"src":"6422:0:1"},"scope":151,"src":"6329:94:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":149,"nodeType":"Block","src":"6707:167:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":132,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6717:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6721:6:1","memberName":"sender","nodeType":"MemberAccess","src":"6717:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":134,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":104,"src":"6731:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6717:28:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":143,"nodeType":"IfStatement","src":"6713:109:1","trueBody":{"id":142,"nodeType":"Block","src":"6747:75:1","statements":[{"errorCall":{"arguments":[{"expression":{"id":137,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6788:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6792:6:1","memberName":"sender","nodeType":"MemberAccess","src":"6788:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":139,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":104,"src":"6800:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":136,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":102,"src":"6762:25:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6762:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":141,"nodeType":"RevertStatement","src":"6755:60:1"}]}},{"expression":{"arguments":[{"id":145,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"6846:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":146,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"6857:11:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":144,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"6827:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6827:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":148,"nodeType":"ExpressionStatement","src":"6827:42:1"}]},"functionSelector":"1fe543e3","id":150,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6627:21:1","nodeType":"FunctionDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":126,"mutability":"mutable","name":"requestId","nameLocation":"6657:9:1","nodeType":"VariableDeclaration","scope":150,"src":"6649:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":125,"name":"uint256","nodeType":"ElementaryTypeName","src":"6649:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":129,"mutability":"mutable","name":"randomWords","nameLocation":"6685:11:1","nodeType":"VariableDeclaration","scope":150,"src":"6668:28:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":127,"name":"uint256","nodeType":"ElementaryTypeName","src":"6668:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":128,"nodeType":"ArrayTypeName","src":"6668:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6648:49:1"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[],"src":"6707:0:1"},"scope":151,"src":"6618:256:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":152,"src":"5333:1543:1","usedErrors":[102]}],"src":"32:6845:1"},"id":1}},"contracts":{"contracts/Raffle.sol":{"Raffle":{"abi":[{"inputs":[{"internalType":"address","name":"vrfCoordinatorV2","type":"address"},{"internalType":"uint256","name":"entrancefee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[],"name":"Raffle_NotEnoughtETH","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"}],"name":"RaffleEnster","type":"event"},{"inputs":[],"name":"enterRaffle","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getPlayer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"reqpickRandomNumb","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_115":{"entryPoint":null,"id":115,"parameterSlots":1,"returnSlots":0},"@_30":{"entryPoint":null,"id":30,"parameterSlots":2,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":197,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":251,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256_fromMemory":{"entryPoint":272,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":156,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":124,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":218,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":119,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":174,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":228,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1715:2","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:2","statements":[{"nodeType":"YulAssignment","src":"57:19:2","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:2","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:2"},"nodeType":"YulFunctionCall","src":"67:9:2"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:2"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:2","type":""}],"src":"7:75:2"},{"body":{"nodeType":"YulBlock","src":"177:28:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:2"},"nodeType":"YulFunctionCall","src":"187:12:2"},"nodeType":"YulExpressionStatement","src":"187:12:2"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:2"},{"body":{"nodeType":"YulBlock","src":"300:28:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:2"},"nodeType":"YulFunctionCall","src":"310:12:2"},"nodeType":"YulExpressionStatement","src":"310:12:2"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:2"},{"body":{"nodeType":"YulBlock","src":"379:81:2","statements":[{"nodeType":"YulAssignment","src":"389:65:2","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:2"},"nodeType":"YulFunctionCall","src":"400:54:2"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:2"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:2","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:2","type":""}],"src":"334:126:2"},{"body":{"nodeType":"YulBlock","src":"511:51:2","statements":[{"nodeType":"YulAssignment","src":"521:35:2","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:2"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:2"},"nodeType":"YulFunctionCall","src":"532:24:2"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:2"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:2","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:2","type":""}],"src":"466:96:2"},{"body":{"nodeType":"YulBlock","src":"611:79:2","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:2"},"nodeType":"YulFunctionCall","src":"670:12:2"},"nodeType":"YulExpressionStatement","src":"670:12:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:2"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:2"},"nodeType":"YulFunctionCall","src":"641:24:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:2"},"nodeType":"YulFunctionCall","src":"631:35:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:2"},"nodeType":"YulFunctionCall","src":"624:43:2"},"nodeType":"YulIf","src":"621:63:2"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:2","type":""}],"src":"568:122:2"},{"body":{"nodeType":"YulBlock","src":"759:80:2","statements":[{"nodeType":"YulAssignment","src":"769:22:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"784:6:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"778:5:2"},"nodeType":"YulFunctionCall","src":"778:13:2"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:2"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"827:5:2"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"800:26:2"},"nodeType":"YulFunctionCall","src":"800:33:2"},"nodeType":"YulExpressionStatement","src":"800:33:2"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:2","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:2","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:2","type":""}],"src":"696:143:2"},{"body":{"nodeType":"YulBlock","src":"890:32:2","statements":[{"nodeType":"YulAssignment","src":"900:16:2","value":{"name":"value","nodeType":"YulIdentifier","src":"911:5:2"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"900:7:2"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"872:5:2","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"882:7:2","type":""}],"src":"845:77:2"},{"body":{"nodeType":"YulBlock","src":"971:79:2","statements":[{"body":{"nodeType":"YulBlock","src":"1028:16:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1037:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1040:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1030:6:2"},"nodeType":"YulFunctionCall","src":"1030:12:2"},"nodeType":"YulExpressionStatement","src":"1030:12:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"994:5:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1019:5:2"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1001:17:2"},"nodeType":"YulFunctionCall","src":"1001:24:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"991:2:2"},"nodeType":"YulFunctionCall","src":"991:35:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"984:6:2"},"nodeType":"YulFunctionCall","src":"984:43:2"},"nodeType":"YulIf","src":"981:63:2"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"964:5:2","type":""}],"src":"928:122:2"},{"body":{"nodeType":"YulBlock","src":"1119:80:2","statements":[{"nodeType":"YulAssignment","src":"1129:22:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1144:6:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1138:5:2"},"nodeType":"YulFunctionCall","src":"1138:13:2"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1129:5:2"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1187:5:2"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1160:26:2"},"nodeType":"YulFunctionCall","src":"1160:33:2"},"nodeType":"YulExpressionStatement","src":"1160:33:2"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1097:6:2","type":""},{"name":"end","nodeType":"YulTypedName","src":"1105:3:2","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1113:5:2","type":""}],"src":"1056:143:2"},{"body":{"nodeType":"YulBlock","src":"1299:413:2","statements":[{"body":{"nodeType":"YulBlock","src":"1345:83:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1347:77:2"},"nodeType":"YulFunctionCall","src":"1347:79:2"},"nodeType":"YulExpressionStatement","src":"1347:79:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1320:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"1329:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1316:3:2"},"nodeType":"YulFunctionCall","src":"1316:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"1341:2:2","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1312:3:2"},"nodeType":"YulFunctionCall","src":"1312:32:2"},"nodeType":"YulIf","src":"1309:119:2"},{"nodeType":"YulBlock","src":"1438:128:2","statements":[{"nodeType":"YulVariableDeclaration","src":"1453:15:2","value":{"kind":"number","nodeType":"YulLiteral","src":"1467:1:2","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1457:6:2","type":""}]},{"nodeType":"YulAssignment","src":"1482:74:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1528:9:2"},{"name":"offset","nodeType":"YulIdentifier","src":"1539:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1524:3:2"},"nodeType":"YulFunctionCall","src":"1524:22:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1548:7:2"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1492:31:2"},"nodeType":"YulFunctionCall","src":"1492:64:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1482:6:2"}]}]},{"nodeType":"YulBlock","src":"1576:129:2","statements":[{"nodeType":"YulVariableDeclaration","src":"1591:16:2","value":{"kind":"number","nodeType":"YulLiteral","src":"1605:2:2","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1595:6:2","type":""}]},{"nodeType":"YulAssignment","src":"1621:74:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1667:9:2"},{"name":"offset","nodeType":"YulIdentifier","src":"1678:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1663:3:2"},"nodeType":"YulFunctionCall","src":"1663:22:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1687:7:2"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1631:31:2"},"nodeType":"YulFunctionCall","src":"1631:64:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1621:6:2"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1261:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1272:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1284:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1292:6:2","type":""}],"src":"1205:507:2"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":2,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60c060405234801561001057600080fd5b506040516107fb3803806107fb83398181016040528101906100329190610110565b818073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508060a081815250505050610150565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a78261007c565b9050919050565b6100b78161009c565b81146100c257600080fd5b50565b6000815190506100d4816100ae565b92915050565b6000819050919050565b6100ed816100da565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b6000806040838503121561012757610126610077565b5b6000610135858286016100c5565b9250506020610146858286016100fb565b9150509250929050565b60805160a051610678610183600039600081816101c301526102c9015260008181610103015261015701526106786000f3fe60806040526004361061004a5760003560e01c80631fe543e31461004f5780632cfcc539146100785780634b98f57c14610082578063ced72f8714610099578063e55ae4e8146100c4575b600080fd5b34801561005b57600080fd5b50610076600480360381019061007191906104db565b610101565b005b6100806101c1565b005b34801561008e57600080fd5b506100976102c3565b005b3480156100a557600080fd5b506100ae6102c5565b6040516100bb9190610546565b60405180910390f35b3480156100d057600080fd5b506100eb60048036038101906100e69190610561565b6102ed565b6040516100f891906105cf565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101b357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016101aa9291906105ea565b60405180910390fd5b6101bd8282610334565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561021b576040517fb284444200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fc0b8dcec7f7b324cf979cccfb4ea084e2188e0e073a215f2e389433c68442c8160405160405180910390a2565b565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061030257610301610613565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61035f8161034c565b811461036a57600080fd5b50565b60008135905061037c81610356565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103d082610387565b810181811067ffffffffffffffff821117156103ef576103ee610398565b5b80604052505050565b6000610402610338565b905061040e82826103c7565b919050565b600067ffffffffffffffff82111561042e5761042d610398565b5b602082029050602081019050919050565b600080fd5b600061045761045284610413565b6103f8565b9050808382526020820190506020840283018581111561047a5761047961043f565b5b835b818110156104a3578061048f888261036d565b84526020840193505060208101905061047c565b5050509392505050565b600082601f8301126104c2576104c1610382565b5b81356104d2848260208601610444565b91505092915050565b600080604083850312156104f2576104f1610342565b5b60006105008582860161036d565b925050602083013567ffffffffffffffff81111561052157610520610347565b5b61052d858286016104ad565b9150509250929050565b6105408161034c565b82525050565b600060208201905061055b6000830184610537565b92915050565b60006020828403121561057757610576610342565b5b60006105858482850161036d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105b98261058e565b9050919050565b6105c9816105ae565b82525050565b60006020820190506105e460008301846105c0565b92915050565b60006040820190506105ff60008301856105c0565b61060c60208301846105c0565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212209b98f6e7aca5e201616eddc68d40ef52dda987d5af0d418db2a93d8144b4bf5464736f6c63430008130033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x7FB CODESIZE SUB DUP1 PUSH2 0x7FB DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x110 JUMP JUMPDEST DUP2 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP DUP1 PUSH1 0xA0 DUP2 DUP2 MSTORE POP POP POP POP PUSH2 0x150 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA7 DUP3 PUSH2 0x7C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB7 DUP2 PUSH2 0x9C JUMP JUMPDEST DUP2 EQ PUSH2 0xC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xD4 DUP2 PUSH2 0xAE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xED DUP2 PUSH2 0xDA JUMP JUMPDEST DUP2 EQ PUSH2 0xF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x10A DUP2 PUSH2 0xE4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x127 JUMPI PUSH2 0x126 PUSH2 0x77 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x135 DUP6 DUP3 DUP7 ADD PUSH2 0xC5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x146 DUP6 DUP3 DUP7 ADD PUSH2 0xFB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x678 PUSH2 0x183 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x1C3 ADD MSTORE PUSH2 0x2C9 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x103 ADD MSTORE PUSH2 0x157 ADD MSTORE PUSH2 0x678 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x4F JUMPI DUP1 PUSH4 0x2CFCC539 EQ PUSH2 0x78 JUMPI DUP1 PUSH4 0x4B98F57C EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0xCED72F87 EQ PUSH2 0x99 JUMPI DUP1 PUSH4 0xE55AE4E8 EQ PUSH2 0xC4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x76 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x71 SWAP2 SWAP1 PUSH2 0x4DB JUMP JUMPDEST PUSH2 0x101 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x80 PUSH2 0x1C1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x97 PUSH2 0x2C3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAE PUSH2 0x2C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBB SWAP2 SWAP1 PUSH2 0x546 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE6 SWAP2 SWAP1 PUSH2 0x561 JUMP JUMPDEST PUSH2 0x2ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF8 SWAP2 SWAP1 PUSH2 0x5CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1B3 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AA SWAP3 SWAP2 SWAP1 PUSH2 0x5EA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1BD DUP3 DUP3 PUSH2 0x334 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x21B JUMPI PUSH1 0x40 MLOAD PUSH32 0xB284444200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC0B8DCEC7F7B324CF979CCCFB4EA084E2188E0E073A215F2E389433C68442C81 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x302 JUMPI PUSH2 0x301 PUSH2 0x613 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x35F DUP2 PUSH2 0x34C JUMP JUMPDEST DUP2 EQ PUSH2 0x36A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x37C DUP2 PUSH2 0x356 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x3D0 DUP3 PUSH2 0x387 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3EF JUMPI PUSH2 0x3EE PUSH2 0x398 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x402 PUSH2 0x338 JUMP JUMPDEST SWAP1 POP PUSH2 0x40E DUP3 DUP3 PUSH2 0x3C7 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x42E JUMPI PUSH2 0x42D PUSH2 0x398 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x457 PUSH2 0x452 DUP5 PUSH2 0x413 JUMP JUMPDEST PUSH2 0x3F8 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x47A JUMPI PUSH2 0x479 PUSH2 0x43F JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4A3 JUMPI DUP1 PUSH2 0x48F DUP9 DUP3 PUSH2 0x36D JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x47C JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4C2 JUMPI PUSH2 0x4C1 PUSH2 0x382 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x4D2 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x444 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4F2 JUMPI PUSH2 0x4F1 PUSH2 0x342 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x500 DUP6 DUP3 DUP7 ADD PUSH2 0x36D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x521 JUMPI PUSH2 0x520 PUSH2 0x347 JUMP JUMPDEST JUMPDEST PUSH2 0x52D DUP6 DUP3 DUP7 ADD PUSH2 0x4AD JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x540 DUP2 PUSH2 0x34C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x55B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x537 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x577 JUMPI PUSH2 0x576 PUSH2 0x342 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x585 DUP5 DUP3 DUP6 ADD PUSH2 0x36D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5B9 DUP3 PUSH2 0x58E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5C9 DUP2 PUSH2 0x5AE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5E4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x5C0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x5FF PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x60C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x5C0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP12 SWAP9 0xF6 0xE7 0xAC 0xA5 0xE2 ADD PUSH2 0x6EDD 0xC6 DUP14 BLOCKHASH 0xEF MSTORE 0xDD 0xA9 DUP8 0xD5 0xAF 0xD COINBASE DUP14 0xB2 0xA9 RETURNDATASIZE DUP2 PREVRANDAO 0xB4 0xBF SLOAD PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"260:906:0:-:0;;;436:138;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;513:16;5616:15:1;5599:32;;;;;;;;;;5556:80;556:11:0::1;540:27;;;;::::0;::::1;436:138:::0;;260:906;;88:117:2;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:77::-;882:7;911:5;900:16;;845:77;;;:::o;928:122::-;1001:24;1019:5;1001:24;:::i;:::-;994:5;991:35;981:63;;1040:1;1037;1030:12;981:63;928:122;:::o;1056:143::-;1113:5;1144:6;1138:13;1129:22;;1160:33;1187:5;1160:33;:::i;:::-;1056:143;;;;:::o;1205:507::-;1284:6;1292;1341:2;1329:9;1320:7;1316:23;1312:32;1309:119;;;1347:79;;:::i;:::-;1309:119;1467:1;1492:64;1548:7;1539:6;1528:9;1524:22;1492:64;:::i;:::-;1482:74;;1438:128;1605:2;1631:64;1687:7;1678:6;1667:9;1663:22;1631:64;:::i;:::-;1621:74;;1576:129;1205:507;;;;;:::o;260:906:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@enterRaffle_58":{"entryPoint":449,"id":58,"parameterSlots":0,"returnSlots":0},"@fulfillRandomWords_72":{"entryPoint":820,"id":72,"parameterSlots":2,"returnSlots":0},"@getFee_80":{"entryPoint":709,"id":80,"parameterSlots":0,"returnSlots":1},"@getPlayer_92":{"entryPoint":749,"id":92,"parameterSlots":1,"returnSlots":1},"@rawFulfillRandomWords_150":{"entryPoint":257,"id":150,"parameterSlots":2,"returnSlots":0},"@reqpickRandomNumb_62":{"entryPoint":707,"id":62,"parameterSlots":0,"returnSlots":0},"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":1092,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":1197,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":877,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":1377,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":1243,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1472,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":1335,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":1487,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":1514,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":1350,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":1016,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":824,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":1043,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_address":{"entryPoint":1454,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1422,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":844,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":967,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x32":{"entryPoint":1555,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":920,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":898,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":1087,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":839,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":834,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":903,"id":null,"parameterSlots":1,"returnSlots":1},"validator_revert_t_uint256":{"entryPoint":854,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5579:2","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:2","statements":[{"nodeType":"YulAssignment","src":"57:19:2","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:2","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:2"},"nodeType":"YulFunctionCall","src":"67:9:2"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:2"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:2","type":""}],"src":"7:75:2"},{"body":{"nodeType":"YulBlock","src":"177:28:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:2"},"nodeType":"YulFunctionCall","src":"187:12:2"},"nodeType":"YulExpressionStatement","src":"187:12:2"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:2"},{"body":{"nodeType":"YulBlock","src":"300:28:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:2"},"nodeType":"YulFunctionCall","src":"310:12:2"},"nodeType":"YulExpressionStatement","src":"310:12:2"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:2"},{"body":{"nodeType":"YulBlock","src":"379:32:2","statements":[{"nodeType":"YulAssignment","src":"389:16:2","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:2"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:2"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:2","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:2","type":""}],"src":"334:77:2"},{"body":{"nodeType":"YulBlock","src":"460:79:2","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:2"},"nodeType":"YulFunctionCall","src":"519:12:2"},"nodeType":"YulExpressionStatement","src":"519:12:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:2"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"490:17:2"},"nodeType":"YulFunctionCall","src":"490:24:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:2"},"nodeType":"YulFunctionCall","src":"480:35:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:2"},"nodeType":"YulFunctionCall","src":"473:43:2"},"nodeType":"YulIf","src":"470:63:2"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:2","type":""}],"src":"417:122:2"},{"body":{"nodeType":"YulBlock","src":"597:87:2","statements":[{"nodeType":"YulAssignment","src":"607:29:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:2"},"nodeType":"YulFunctionCall","src":"616:20:2"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:2"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:2"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"645:26:2"},"nodeType":"YulFunctionCall","src":"645:33:2"},"nodeType":"YulExpressionStatement","src":"645:33:2"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:2","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:2","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:2","type":""}],"src":"545:139:2"},{"body":{"nodeType":"YulBlock","src":"779:28:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"796:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"799:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"789:6:2"},"nodeType":"YulFunctionCall","src":"789:12:2"},"nodeType":"YulExpressionStatement","src":"789:12:2"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"690:117:2"},{"body":{"nodeType":"YulBlock","src":"861:54:2","statements":[{"nodeType":"YulAssignment","src":"871:38:2","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"889:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"896:2:2","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"885:3:2"},"nodeType":"YulFunctionCall","src":"885:14:2"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"905:2:2","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"901:3:2"},"nodeType":"YulFunctionCall","src":"901:7:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"881:3:2"},"nodeType":"YulFunctionCall","src":"881:28:2"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"871:6:2"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"844:5:2","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"854:6:2","type":""}],"src":"813:102:2"},{"body":{"nodeType":"YulBlock","src":"949:152:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"966:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"969:77:2","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"959:6:2"},"nodeType":"YulFunctionCall","src":"959:88:2"},"nodeType":"YulExpressionStatement","src":"959:88:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1063:1:2","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1066:4:2","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1056:6:2"},"nodeType":"YulFunctionCall","src":"1056:15:2"},"nodeType":"YulExpressionStatement","src":"1056:15:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1087:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1090:4:2","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1080:6:2"},"nodeType":"YulFunctionCall","src":"1080:15:2"},"nodeType":"YulExpressionStatement","src":"1080:15:2"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"921:180:2"},{"body":{"nodeType":"YulBlock","src":"1150:238:2","statements":[{"nodeType":"YulVariableDeclaration","src":"1160:58:2","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1182:6:2"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1212:4:2"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1190:21:2"},"nodeType":"YulFunctionCall","src":"1190:27:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1178:3:2"},"nodeType":"YulFunctionCall","src":"1178:40:2"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1164:10:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"1329:22:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1331:16:2"},"nodeType":"YulFunctionCall","src":"1331:18:2"},"nodeType":"YulExpressionStatement","src":"1331:18:2"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1272:10:2"},{"kind":"number","nodeType":"YulLiteral","src":"1284:18:2","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1269:2:2"},"nodeType":"YulFunctionCall","src":"1269:34:2"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1308:10:2"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1320:6:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1305:2:2"},"nodeType":"YulFunctionCall","src":"1305:22:2"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1266:2:2"},"nodeType":"YulFunctionCall","src":"1266:62:2"},"nodeType":"YulIf","src":"1263:88:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1367:2:2","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1371:10:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1360:6:2"},"nodeType":"YulFunctionCall","src":"1360:22:2"},"nodeType":"YulExpressionStatement","src":"1360:22:2"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1136:6:2","type":""},{"name":"size","nodeType":"YulTypedName","src":"1144:4:2","type":""}],"src":"1107:281:2"},{"body":{"nodeType":"YulBlock","src":"1435:88:2","statements":[{"nodeType":"YulAssignment","src":"1445:30:2","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1455:18:2"},"nodeType":"YulFunctionCall","src":"1455:20:2"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1445:6:2"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1504:6:2"},{"name":"size","nodeType":"YulIdentifier","src":"1512:4:2"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1484:19:2"},"nodeType":"YulFunctionCall","src":"1484:33:2"},"nodeType":"YulExpressionStatement","src":"1484:33:2"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1419:4:2","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1428:6:2","type":""}],"src":"1394:129:2"},{"body":{"nodeType":"YulBlock","src":"1611:229:2","statements":[{"body":{"nodeType":"YulBlock","src":"1716:22:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1718:16:2"},"nodeType":"YulFunctionCall","src":"1718:18:2"},"nodeType":"YulExpressionStatement","src":"1718:18:2"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1688:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"1696:18:2","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1685:2:2"},"nodeType":"YulFunctionCall","src":"1685:30:2"},"nodeType":"YulIf","src":"1682:56:2"},{"nodeType":"YulAssignment","src":"1748:25:2","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1760:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"1768:4:2","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1756:3:2"},"nodeType":"YulFunctionCall","src":"1756:17:2"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1748:4:2"}]},{"nodeType":"YulAssignment","src":"1810:23:2","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1822:4:2"},{"kind":"number","nodeType":"YulLiteral","src":"1828:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1818:3:2"},"nodeType":"YulFunctionCall","src":"1818:15:2"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1810:4:2"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1595:6:2","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1606:4:2","type":""}],"src":"1529:311:2"},{"body":{"nodeType":"YulBlock","src":"1935:28:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1952:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1955:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1945:6:2"},"nodeType":"YulFunctionCall","src":"1945:12:2"},"nodeType":"YulExpressionStatement","src":"1945:12:2"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"1846:117:2"},{"body":{"nodeType":"YulBlock","src":"2088:608:2","statements":[{"nodeType":"YulAssignment","src":"2098:90:2","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2180:6:2"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"2123:56:2"},"nodeType":"YulFunctionCall","src":"2123:64:2"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2107:15:2"},"nodeType":"YulFunctionCall","src":"2107:81:2"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2098:5:2"}]},{"nodeType":"YulVariableDeclaration","src":"2197:16:2","value":{"name":"array","nodeType":"YulIdentifier","src":"2208:5:2"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2201:3:2","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2230:5:2"},{"name":"length","nodeType":"YulIdentifier","src":"2237:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2223:6:2"},"nodeType":"YulFunctionCall","src":"2223:21:2"},"nodeType":"YulExpressionStatement","src":"2223:21:2"},{"nodeType":"YulAssignment","src":"2253:23:2","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2264:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"2271:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2260:3:2"},"nodeType":"YulFunctionCall","src":"2260:16:2"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2253:3:2"}]},{"nodeType":"YulVariableDeclaration","src":"2286:44:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2304:6:2"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2316:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"2324:4:2","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2312:3:2"},"nodeType":"YulFunctionCall","src":"2312:17:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2300:3:2"},"nodeType":"YulFunctionCall","src":"2300:30:2"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"2290:6:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"2358:103:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"2372:77:2"},"nodeType":"YulFunctionCall","src":"2372:79:2"},"nodeType":"YulExpressionStatement","src":"2372:79:2"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"2345:6:2"},{"name":"end","nodeType":"YulIdentifier","src":"2353:3:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2342:2:2"},"nodeType":"YulFunctionCall","src":"2342:15:2"},"nodeType":"YulIf","src":"2339:122:2"},{"body":{"nodeType":"YulBlock","src":"2546:144:2","statements":[{"nodeType":"YulVariableDeclaration","src":"2561:21:2","value":{"name":"src","nodeType":"YulIdentifier","src":"2579:3:2"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"2565:10:2","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2603:3:2"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"2629:10:2"},{"name":"end","nodeType":"YulIdentifier","src":"2641:3:2"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2608:20:2"},"nodeType":"YulFunctionCall","src":"2608:37:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2596:6:2"},"nodeType":"YulFunctionCall","src":"2596:50:2"},"nodeType":"YulExpressionStatement","src":"2596:50:2"},{"nodeType":"YulAssignment","src":"2659:21:2","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2670:3:2"},{"kind":"number","nodeType":"YulLiteral","src":"2675:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2666:3:2"},"nodeType":"YulFunctionCall","src":"2666:14:2"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2659:3:2"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2499:3:2"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"2504:6:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2496:2:2"},"nodeType":"YulFunctionCall","src":"2496:15:2"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2512:25:2","statements":[{"nodeType":"YulAssignment","src":"2514:21:2","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2525:3:2"},{"kind":"number","nodeType":"YulLiteral","src":"2530:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2521:3:2"},"nodeType":"YulFunctionCall","src":"2521:14:2"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"2514:3:2"}]}]},"pre":{"nodeType":"YulBlock","src":"2474:21:2","statements":[{"nodeType":"YulVariableDeclaration","src":"2476:17:2","value":{"name":"offset","nodeType":"YulIdentifier","src":"2487:6:2"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"2480:3:2","type":""}]}]},"src":"2470:220:2"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2058:6:2","type":""},{"name":"length","nodeType":"YulTypedName","src":"2066:6:2","type":""},{"name":"end","nodeType":"YulTypedName","src":"2074:3:2","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2082:5:2","type":""}],"src":"1986:710:2"},{"body":{"nodeType":"YulBlock","src":"2796:293:2","statements":[{"body":{"nodeType":"YulBlock","src":"2845:83:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2847:77:2"},"nodeType":"YulFunctionCall","src":"2847:79:2"},"nodeType":"YulExpressionStatement","src":"2847:79:2"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2824:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"2832:4:2","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2820:3:2"},"nodeType":"YulFunctionCall","src":"2820:17:2"},{"name":"end","nodeType":"YulIdentifier","src":"2839:3:2"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2816:3:2"},"nodeType":"YulFunctionCall","src":"2816:27:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2809:6:2"},"nodeType":"YulFunctionCall","src":"2809:35:2"},"nodeType":"YulIf","src":"2806:122:2"},{"nodeType":"YulVariableDeclaration","src":"2937:34:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2964:6:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2951:12:2"},"nodeType":"YulFunctionCall","src":"2951:20:2"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2941:6:2","type":""}]},{"nodeType":"YulAssignment","src":"2980:103:2","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3056:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"3064:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3052:3:2"},"nodeType":"YulFunctionCall","src":"3052:17:2"},{"name":"length","nodeType":"YulIdentifier","src":"3071:6:2"},{"name":"end","nodeType":"YulIdentifier","src":"3079:3:2"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"2989:62:2"},"nodeType":"YulFunctionCall","src":"2989:94:2"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2980:5:2"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2774:6:2","type":""},{"name":"end","nodeType":"YulTypedName","src":"2782:3:2","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2790:5:2","type":""}],"src":"2719:370:2"},{"body":{"nodeType":"YulBlock","src":"3203:576:2","statements":[{"body":{"nodeType":"YulBlock","src":"3249:83:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3251:77:2"},"nodeType":"YulFunctionCall","src":"3251:79:2"},"nodeType":"YulExpressionStatement","src":"3251:79:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3224:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"3233:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3220:3:2"},"nodeType":"YulFunctionCall","src":"3220:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"3245:2:2","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3216:3:2"},"nodeType":"YulFunctionCall","src":"3216:32:2"},"nodeType":"YulIf","src":"3213:119:2"},{"nodeType":"YulBlock","src":"3342:117:2","statements":[{"nodeType":"YulVariableDeclaration","src":"3357:15:2","value":{"kind":"number","nodeType":"YulLiteral","src":"3371:1:2","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3361:6:2","type":""}]},{"nodeType":"YulAssignment","src":"3386:63:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3421:9:2"},{"name":"offset","nodeType":"YulIdentifier","src":"3432:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3417:3:2"},"nodeType":"YulFunctionCall","src":"3417:22:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3441:7:2"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3396:20:2"},"nodeType":"YulFunctionCall","src":"3396:53:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3386:6:2"}]}]},{"nodeType":"YulBlock","src":"3469:303:2","statements":[{"nodeType":"YulVariableDeclaration","src":"3484:46:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3515:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3526:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3511:3:2"},"nodeType":"YulFunctionCall","src":"3511:18:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3498:12:2"},"nodeType":"YulFunctionCall","src":"3498:32:2"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3488:6:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"3577:83:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3579:77:2"},"nodeType":"YulFunctionCall","src":"3579:79:2"},"nodeType":"YulExpressionStatement","src":"3579:79:2"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3549:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"3557:18:2","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3546:2:2"},"nodeType":"YulFunctionCall","src":"3546:30:2"},"nodeType":"YulIf","src":"3543:117:2"},{"nodeType":"YulAssignment","src":"3674:88:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3734:9:2"},{"name":"offset","nodeType":"YulIdentifier","src":"3745:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3730:3:2"},"nodeType":"YulFunctionCall","src":"3730:22:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3754:7:2"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3684:45:2"},"nodeType":"YulFunctionCall","src":"3684:78:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3674:6:2"}]}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3165:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3176:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3188:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3196:6:2","type":""}],"src":"3095:684:2"},{"body":{"nodeType":"YulBlock","src":"3850:53:2","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3867:3:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3890:5:2"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3872:17:2"},"nodeType":"YulFunctionCall","src":"3872:24:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3860:6:2"},"nodeType":"YulFunctionCall","src":"3860:37:2"},"nodeType":"YulExpressionStatement","src":"3860:37:2"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3838:5:2","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3845:3:2","type":""}],"src":"3785:118:2"},{"body":{"nodeType":"YulBlock","src":"4007:124:2","statements":[{"nodeType":"YulAssignment","src":"4017:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4029:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"4040:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4025:3:2"},"nodeType":"YulFunctionCall","src":"4025:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4017:4:2"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4097:6:2"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4110:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"4121:1:2","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4106:3:2"},"nodeType":"YulFunctionCall","src":"4106:17:2"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"4053:43:2"},"nodeType":"YulFunctionCall","src":"4053:71:2"},"nodeType":"YulExpressionStatement","src":"4053:71:2"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3979:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3991:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4002:4:2","type":""}],"src":"3909:222:2"},{"body":{"nodeType":"YulBlock","src":"4203:263:2","statements":[{"body":{"nodeType":"YulBlock","src":"4249:83:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4251:77:2"},"nodeType":"YulFunctionCall","src":"4251:79:2"},"nodeType":"YulExpressionStatement","src":"4251:79:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4224:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"4233:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4220:3:2"},"nodeType":"YulFunctionCall","src":"4220:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"4245:2:2","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4216:3:2"},"nodeType":"YulFunctionCall","src":"4216:32:2"},"nodeType":"YulIf","src":"4213:119:2"},{"nodeType":"YulBlock","src":"4342:117:2","statements":[{"nodeType":"YulVariableDeclaration","src":"4357:15:2","value":{"kind":"number","nodeType":"YulLiteral","src":"4371:1:2","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4361:6:2","type":""}]},{"nodeType":"YulAssignment","src":"4386:63:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4421:9:2"},{"name":"offset","nodeType":"YulIdentifier","src":"4432:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4417:3:2"},"nodeType":"YulFunctionCall","src":"4417:22:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4441:7:2"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4396:20:2"},"nodeType":"YulFunctionCall","src":"4396:53:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4386:6:2"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4173:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4184:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4196:6:2","type":""}],"src":"4137:329:2"},{"body":{"nodeType":"YulBlock","src":"4517:81:2","statements":[{"nodeType":"YulAssignment","src":"4527:65:2","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4542:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"4549:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4538:3:2"},"nodeType":"YulFunctionCall","src":"4538:54:2"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4527:7:2"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4499:5:2","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4509:7:2","type":""}],"src":"4472:126:2"},{"body":{"nodeType":"YulBlock","src":"4649:51:2","statements":[{"nodeType":"YulAssignment","src":"4659:35:2","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4688:5:2"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"4670:17:2"},"nodeType":"YulFunctionCall","src":"4670:24:2"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4659:7:2"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4631:5:2","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4641:7:2","type":""}],"src":"4604:96:2"},{"body":{"nodeType":"YulBlock","src":"4771:53:2","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4788:3:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4811:5:2"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4793:17:2"},"nodeType":"YulFunctionCall","src":"4793:24:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4781:6:2"},"nodeType":"YulFunctionCall","src":"4781:37:2"},"nodeType":"YulExpressionStatement","src":"4781:37:2"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4759:5:2","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4766:3:2","type":""}],"src":"4706:118:2"},{"body":{"nodeType":"YulBlock","src":"4928:124:2","statements":[{"nodeType":"YulAssignment","src":"4938:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4950:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"4961:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4946:3:2"},"nodeType":"YulFunctionCall","src":"4946:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4938:4:2"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5018:6:2"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5031:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"5042:1:2","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5027:3:2"},"nodeType":"YulFunctionCall","src":"5027:17:2"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4974:43:2"},"nodeType":"YulFunctionCall","src":"4974:71:2"},"nodeType":"YulExpressionStatement","src":"4974:71:2"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4900:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4912:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4923:4:2","type":""}],"src":"4830:222:2"},{"body":{"nodeType":"YulBlock","src":"5184:206:2","statements":[{"nodeType":"YulAssignment","src":"5194:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5206:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"5217:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5202:3:2"},"nodeType":"YulFunctionCall","src":"5202:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5194:4:2"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5274:6:2"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5287:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"5298:1:2","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5283:3:2"},"nodeType":"YulFunctionCall","src":"5283:17:2"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"5230:43:2"},"nodeType":"YulFunctionCall","src":"5230:71:2"},"nodeType":"YulExpressionStatement","src":"5230:71:2"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5355:6:2"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5368:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"5379:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5364:3:2"},"nodeType":"YulFunctionCall","src":"5364:18:2"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"5311:43:2"},"nodeType":"YulFunctionCall","src":"5311:72:2"},"nodeType":"YulExpressionStatement","src":"5311:72:2"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5148:9:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5160:6:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5168:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5179:4:2","type":""}],"src":"5058:332:2"},{"body":{"nodeType":"YulBlock","src":"5424:152:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5441:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5444:77:2","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5434:6:2"},"nodeType":"YulFunctionCall","src":"5434:88:2"},"nodeType":"YulExpressionStatement","src":"5434:88:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5538:1:2","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5541:4:2","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5531:6:2"},"nodeType":"YulFunctionCall","src":"5531:15:2"},"nodeType":"YulExpressionStatement","src":"5531:15:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5562:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5565:4:2","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5555:6:2"},"nodeType":"YulFunctionCall","src":"5555:15:2"},"nodeType":"YulExpressionStatement","src":"5555:15:2"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"5396:180:2"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n}\n","id":2,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"8":[{"length":32,"start":451},{"length":32,"start":713}],"104":[{"length":32,"start":259},{"length":32,"start":343}]},"linkReferences":{},"object":"60806040526004361061004a5760003560e01c80631fe543e31461004f5780632cfcc539146100785780634b98f57c14610082578063ced72f8714610099578063e55ae4e8146100c4575b600080fd5b34801561005b57600080fd5b50610076600480360381019061007191906104db565b610101565b005b6100806101c1565b005b34801561008e57600080fd5b506100976102c3565b005b3480156100a557600080fd5b506100ae6102c5565b6040516100bb9190610546565b60405180910390f35b3480156100d057600080fd5b506100eb60048036038101906100e69190610561565b6102ed565b6040516100f891906105cf565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101b357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016101aa9291906105ea565b60405180910390fd5b6101bd8282610334565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561021b576040517fb284444200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fc0b8dcec7f7b324cf979cccfb4ea084e2188e0e073a215f2e389433c68442c8160405160405180910390a2565b565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061030257610301610613565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61035f8161034c565b811461036a57600080fd5b50565b60008135905061037c81610356565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103d082610387565b810181811067ffffffffffffffff821117156103ef576103ee610398565b5b80604052505050565b6000610402610338565b905061040e82826103c7565b919050565b600067ffffffffffffffff82111561042e5761042d610398565b5b602082029050602081019050919050565b600080fd5b600061045761045284610413565b6103f8565b9050808382526020820190506020840283018581111561047a5761047961043f565b5b835b818110156104a3578061048f888261036d565b84526020840193505060208101905061047c565b5050509392505050565b600082601f8301126104c2576104c1610382565b5b81356104d2848260208601610444565b91505092915050565b600080604083850312156104f2576104f1610342565b5b60006105008582860161036d565b925050602083013567ffffffffffffffff81111561052157610520610347565b5b61052d858286016104ad565b9150509250929050565b6105408161034c565b82525050565b600060208201905061055b6000830184610537565b92915050565b60006020828403121561057757610576610342565b5b60006105858482850161036d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105b98261058e565b9050919050565b6105c9816105ae565b82525050565b60006020820190506105e460008301846105c0565b92915050565b60006040820190506105ff60008301856105c0565b61060c60208301846105c0565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212209b98f6e7aca5e201616eddc68d40ef52dda987d5af0d418db2a93d8144b4bf5464736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x4F JUMPI DUP1 PUSH4 0x2CFCC539 EQ PUSH2 0x78 JUMPI DUP1 PUSH4 0x4B98F57C EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0xCED72F87 EQ PUSH2 0x99 JUMPI DUP1 PUSH4 0xE55AE4E8 EQ PUSH2 0xC4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x76 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x71 SWAP2 SWAP1 PUSH2 0x4DB JUMP JUMPDEST PUSH2 0x101 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x80 PUSH2 0x1C1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x97 PUSH2 0x2C3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAE PUSH2 0x2C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBB SWAP2 SWAP1 PUSH2 0x546 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE6 SWAP2 SWAP1 PUSH2 0x561 JUMP JUMPDEST PUSH2 0x2ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF8 SWAP2 SWAP1 PUSH2 0x5CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1B3 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AA SWAP3 SWAP2 SWAP1 PUSH2 0x5EA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1BD DUP3 DUP3 PUSH2 0x334 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x21B JUMPI PUSH1 0x40 MLOAD PUSH32 0xB284444200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC0B8DCEC7F7B324CF979CCCFB4EA084E2188E0E073A215F2E389433C68442C81 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x302 JUMPI PUSH2 0x301 PUSH2 0x613 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x35F DUP2 PUSH2 0x34C JUMP JUMPDEST DUP2 EQ PUSH2 0x36A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x37C DUP2 PUSH2 0x356 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x3D0 DUP3 PUSH2 0x387 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3EF JUMPI PUSH2 0x3EE PUSH2 0x398 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x402 PUSH2 0x338 JUMP JUMPDEST SWAP1 POP PUSH2 0x40E DUP3 DUP3 PUSH2 0x3C7 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x42E JUMPI PUSH2 0x42D PUSH2 0x398 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x457 PUSH2 0x452 DUP5 PUSH2 0x413 JUMP JUMPDEST PUSH2 0x3F8 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x47A JUMPI PUSH2 0x479 PUSH2 0x43F JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4A3 JUMPI DUP1 PUSH2 0x48F DUP9 DUP3 PUSH2 0x36D JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x47C JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4C2 JUMPI PUSH2 0x4C1 PUSH2 0x382 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x4D2 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x444 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4F2 JUMPI PUSH2 0x4F1 PUSH2 0x342 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x500 DUP6 DUP3 DUP7 ADD PUSH2 0x36D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x521 JUMPI PUSH2 0x520 PUSH2 0x347 JUMP JUMPDEST JUMPDEST PUSH2 0x52D DUP6 DUP3 DUP7 ADD PUSH2 0x4AD JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x540 DUP2 PUSH2 0x34C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x55B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x537 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x577 JUMPI PUSH2 0x576 PUSH2 0x342 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x585 DUP5 DUP3 DUP6 ADD PUSH2 0x36D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5B9 DUP3 PUSH2 0x58E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5C9 DUP2 PUSH2 0x5AE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5E4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x5C0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x5FF PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x60C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x5C0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP12 SWAP9 0xF6 0xE7 0xAC 0xA5 0xE2 ADD PUSH2 0x6EDD 0xC6 DUP14 BLOCKHASH 0xEF MSTORE 0xDD 0xA9 DUP8 0xD5 0xAF 0xD COINBASE DUP14 0xB2 0xA9 RETURNDATASIZE DUP2 PREVRANDAO 0xB4 0xBF SLOAD PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"260:906:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6618:256:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;580:237:0;;;:::i;:::-;;822:44;;;;;;;;;;;;;:::i;:::-;;974:83;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1062:102;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6618:256:1;6731:14;6717:28;;:10;:28;;;6713:109;;6788:10;6800:14;6762:53;;;;;;;;;;;;:::i;:::-;;;;;;;;6713:109;6827:42;6846:9;6857:11;6827:18;:42::i;:::-;6618:256;;:::o;580:237:0:-;642:13;630:9;:25;627:83;;;677:22;;;;;;;;;;;;;;627:83;719:9;742:10;719:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;799:10;786:24;;;;;;;;;;;;580:237::o;822:44::-;:::o;974:83::-;1012:7;1037:13;1030:20;;974:83;:::o;1062:102::-;1116:7;1141:9;1151:5;1141:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1134:23;;1062:102;;;:::o;871:98::-;;;:::o;7:75:2:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:117::-;799:1;796;789:12;813:102;854:6;905:2;901:7;896:2;889:5;885:14;881:28;871:38;;813:102;;;:::o;921:180::-;969:77;966:1;959:88;1066:4;1063:1;1056:15;1090:4;1087:1;1080:15;1107:281;1190:27;1212:4;1190:27;:::i;:::-;1182:6;1178:40;1320:6;1308:10;1305:22;1284:18;1272:10;1269:34;1266:62;1263:88;;;1331:18;;:::i;:::-;1263:88;1371:10;1367:2;1360:22;1150:238;1107:281;;:::o;1394:129::-;1428:6;1455:20;;:::i;:::-;1445:30;;1484:33;1512:4;1504:6;1484:33;:::i;:::-;1394:129;;;:::o;1529:311::-;1606:4;1696:18;1688:6;1685:30;1682:56;;;1718:18;;:::i;:::-;1682:56;1768:4;1760:6;1756:17;1748:25;;1828:4;1822;1818:15;1810:23;;1529:311;;;:::o;1846:117::-;1955:1;1952;1945:12;1986:710;2082:5;2107:81;2123:64;2180:6;2123:64;:::i;:::-;2107:81;:::i;:::-;2098:90;;2208:5;2237:6;2230:5;2223:21;2271:4;2264:5;2260:16;2253:23;;2324:4;2316:6;2312:17;2304:6;2300:30;2353:3;2345:6;2342:15;2339:122;;;2372:79;;:::i;:::-;2339:122;2487:6;2470:220;2504:6;2499:3;2496:15;2470:220;;;2579:3;2608:37;2641:3;2629:10;2608:37;:::i;:::-;2603:3;2596:50;2675:4;2670:3;2666:14;2659:21;;2546:144;2530:4;2525:3;2521:14;2514:21;;2470:220;;;2474:21;2088:608;;1986:710;;;;;:::o;2719:370::-;2790:5;2839:3;2832:4;2824:6;2820:17;2816:27;2806:122;;2847:79;;:::i;:::-;2806:122;2964:6;2951:20;2989:94;3079:3;3071:6;3064:4;3056:6;3052:17;2989:94;:::i;:::-;2980:103;;2796:293;2719:370;;;;:::o;3095:684::-;3188:6;3196;3245:2;3233:9;3224:7;3220:23;3216:32;3213:119;;;3251:79;;:::i;:::-;3213:119;3371:1;3396:53;3441:7;3432:6;3421:9;3417:22;3396:53;:::i;:::-;3386:63;;3342:117;3526:2;3515:9;3511:18;3498:32;3557:18;3549:6;3546:30;3543:117;;;3579:79;;:::i;:::-;3543:117;3684:78;3754:7;3745:6;3734:9;3730:22;3684:78;:::i;:::-;3674:88;;3469:303;3095:684;;;;;:::o;3785:118::-;3872:24;3890:5;3872:24;:::i;:::-;3867:3;3860:37;3785:118;;:::o;3909:222::-;4002:4;4040:2;4029:9;4025:18;4017:26;;4053:71;4121:1;4110:9;4106:17;4097:6;4053:71;:::i;:::-;3909:222;;;;:::o;4137:329::-;4196:6;4245:2;4233:9;4224:7;4220:23;4216:32;4213:119;;;4251:79;;:::i;:::-;4213:119;4371:1;4396:53;4441:7;4432:6;4421:9;4417:22;4396:53;:::i;:::-;4386:63;;4342:117;4137:329;;;;:::o;4472:126::-;4509:7;4549:42;4542:5;4538:54;4527:65;;4472:126;;;:::o;4604:96::-;4641:7;4670:24;4688:5;4670:24;:::i;:::-;4659:35;;4604:96;;;:::o;4706:118::-;4793:24;4811:5;4793:24;:::i;:::-;4788:3;4781:37;4706:118;;:::o;4830:222::-;4923:4;4961:2;4950:9;4946:18;4938:26;;4974:71;5042:1;5031:9;5027:17;5018:6;4974:71;:::i;:::-;4830:222;;;;:::o;5058:332::-;5179:4;5217:2;5206:9;5202:18;5194:26;;5230:71;5298:1;5287:9;5283:17;5274:6;5230:71;:::i;:::-;5311:72;5379:2;5368:9;5364:18;5355:6;5311:72;:::i;:::-;5058:332;;;;;:::o;5396:180::-;5444:77;5441:1;5434:88;5541:4;5538:1;5531:15;5565:4;5562:1;5555:15"},"gasEstimates":{"creation":{"codeDepositCost":"331200","executionCost":"infinite","totalCost":"infinite"},"external":{"enterRaffle()":"infinite","getFee()":"infinite","getPlayer(uint256)":"5033","rawFulfillRandomWords(uint256,uint256[])":"infinite","reqpickRandomNumb()":"166"},"internal":{"fulfillRandomWords(uint256,uint256[] memory)":"13"}},"methodIdentifiers":{"enterRaffle()":"2cfcc539","getFee()":"ced72f87","getPlayer(uint256)":"e55ae4e8","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3","reqpickRandomNumb()":"4b98f57c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entrancefee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_NotEnoughtETH\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnster\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reqpickRandomNumb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Raffle.sol\":{\"content\":\"// Raffle\\n\\n//Enter the lottery\\n// PICK WInner\\n// Winner picked X minutes\\n\\n// Chailink oracle\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\nimport \\\"node_modules/@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nerror Raffle_NotEnoughtETH();\\n\\ncontract Raffle is VRFConsumerBaseV2{\\n    uint256 private immutable i_entrancefee;\\n    address payable[] private s_players;\\n    event RaffleEnster(address indexed player);\\n    constructor(address vrfCoordinatorV2 ,uint256 entrancefee) VRFConsumerBaseV2(vrfCoordinatorV2){\\n        i_entrancefee = entrancefee;\\n    }\\n\\n    function enterRaffle() public payable{\\n        if(msg.value < i_entrancefee){\\n            revert Raffle_NotEnoughtETH();\\n        }\\n        s_players.push(payable(msg.sender));\\n        //events\\n        emit RaffleEnster(msg.sender);\\n    }\\n    function reqpickRandomNumb()external{\\n\\n    }\\n    function fulfillRandomWords(uint256 reqID, uint256[] memory randomWords) internal override{\\n\\n    }\\n    function getFee() public view returns(uint256){\\n        return i_entrancefee;\\n    }\\n    function getPlayer(uint256 index) public view returns(address){\\n        return s_players[index];\\n    }\\n}\",\"keccak256\":\"0x27e12c7b0a662eeb4e7f8043f95d8d01a31c370533c210923bc0f1edf3ef42ae\",\"license\":\"MIT\"},\"node_modules/@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":11,"contract":"contracts/Raffle.sol:Raffle","label":"s_players","offset":0,"slot":"0","type":"t_array(t_address_payable)dyn_storage"}],"types":{"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_address_payable)dyn_storage":{"base":"t_address_payable","encoding":"dynamic_array","label":"address payable[]","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"node_modules/@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"node_modules/@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}}}}}